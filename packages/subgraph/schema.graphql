type _Schema_
  @fulltext(
    name: "eventSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Event", fields: [{ name: "title" }, { name: "description" }, { name: "location" }] }]
  )

enum Status {
  Active
  Cancelled
  Settled
}

type ConditionModule @entity {
  id: Bytes! # address
  name: String!
  createdAt: BigInt!
  createdBy: Bytes! # address
  whitelisted: Boolean! # true
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Record @entity {
  id: String!
  createdAt: BigInt!
  createdBy: Bytes!
  updatedAt: BigInt
  blockNumber: BigInt!
  transactionHash: Bytes!
  status: Status! # Active
  message: String

  conditionModule: Bytes! # address
  condition: Condition

  contentUri: String!
  metadata: Event

  participants: [Participant!]! @derivedFrom(field: "record")
}

type User @entity {
  id: Bytes! # address
  participations: [Participant!] @derivedFrom(field: "user")
}

type Participant @entity {
  id: String! # Set to `record.id.concat(user.id)`
  createdAt: BigInt!
  createdBy: Bytes!
  address: Bytes! # address
  checkedIn: Boolean! # false
  user: User!
  record: Record!
}

type Event @entity {
  id: ID!
  appId: String
  title: String!
  description: String
  start: String!
  end: String!
  timezone: String!
  location: String!
  website: String
  imageUrl: String
}

type Condition @entity(immutable: true) {
  id: String! # Set to `record.id.concat(conditionModule.id)`
  address: Bytes! # address
  name: String!
  owner: Bytes! # address
  endDate: BigInt!
  depositFee: BigInt!
  maxParticipants: BigInt!
  tokenAddress: Bytes! # address
}
