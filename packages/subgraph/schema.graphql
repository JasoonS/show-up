enum Status {
  Active
  Cancelled
  Settled
}

type ConditionModule @entity {
  id: Bytes! # address
  name: String!
  createdAt: BigInt!
  createdBy: Bytes! # address
  whitelisted: Boolean! # true
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Record @entity {
  id: Bytes!
  recordId: BigInt!
  createdAt: BigInt!
  createdBy: Bytes!
  updatedAt: BigInt
  message: String
  conditionModule: Bytes! # address
  status: Status! # Active
  contentUri: String!
  metadata: Event

  participants: [Participant!]! @derivedFrom(field: "record")

  blockNumber: BigInt!
  transactionHash: Bytes!
}

type User @entity {
  id: Bytes! # address
  participations: [Participant!] @derivedFrom(field: "user")
}

type Participant @entity {
  id: String! # Set to `record.id.concat(user.id)`
  createdAt: BigInt!
  createdBy: Bytes!
  address: Bytes! # address
  checkedIn: Boolean! # false
  user: User!
  record: Record!
}

type Event @entity {
  id: ID!
  appId: String
  title: String!
  description: String
  start: String!
  end: String!
  timezone: String!
  location: String!
  website: String
  imageUrl: String
}
